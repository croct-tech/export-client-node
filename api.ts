/* tslint:disable */
/* eslint-disable */
/**
 * Croct Export
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: apis@croct.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiProblem
 */
export interface ApiProblem {
    [key: string]: any | any;

    /**
     * 
     * @type {string}
     * @memberof ApiProblem
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ApiProblem
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof ApiProblem
     */
    details?: string;
}
/**
 * The available information about a browser.
 * @export
 * @interface Browser
 */
export interface Browser {
    /**
     * The name of the browser, non-empty. For example, \"Chrome\".
     * @type {string}
     * @memberof Browser
     */
    name: string | null;
    /**
     * The version of the browser, non-empty. For example, \"79.0.3945.130\", \"11\" or \"160.1\".
     * @type {string}
     * @memberof Browser
     */
    version: string | null;
    /**
     * 
     * @type {BrowserType}
     * @memberof Browser
     */
    type: BrowserType;
}
/**
 * The type of the browser.
 * @export
 * @enum {string}
 */
export enum BrowserType {
    WEB = 'WEB',
    IN_APP = 'IN_APP',
    CRAWLER = 'CRAWLER',
    OTHER = 'OTHER',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * The product promotion or strategic campaign. For example, \"super_promo\".
     * @type {string}
     * @memberof Campaign
     */
    name?: string | null;
    /**
     * The advertiser that sent traffic to the application. For example, \"newsletter4\".
     * @type {string}
     * @memberof Campaign
     */
    source?: string | null;
    /**
     * The advertising or marketing medium. For example, \"email\".
     * @type {string}
     * @memberof Campaign
     */
    medium?: string | null;
    /**
     * The specific content item related the campaign. For example, \"Buy now!\".
     * @type {string}
     * @memberof Campaign
     */
    content?: string | null;
    /**
     * The search keywords. Foe example, \"web personalization\"
     * @type {string}
     * @memberof Campaign
     */
    term?: string | null;
}
/**
 * A shopping cart in an online store.
 * @export
 * @interface Cart
 */
export interface Cart {
    /**
     * The currency in which the monetary values are expressed in the shopping cart. The currency should be specified using the 3-letter currency codes defined by the ISO 4217 standard. For currencies having no official recognition in ISO 4217, as is the case with cryptocurrencies, it is allowed the use of non-ISO codes adopted locally or commercially. For example, \"BRL\" for Brazilian real or \"BTC\" for Bitcoin.
     * @type {string}
     * @memberof Cart
     */
    currency: string;
    /**
     * The list of items in the shopping cart.
     * @type {Array<CartItem>}
     * @memberof Cart
     */
    items: Array<CartItem>;
    /**
     * The total of all items and quantities in the shopping cart including applied item promotions. Applied order discounts, estimated shipping, and applied shipping discounts should be excluded from the subtotal amount.
     * @type {number}
     * @memberof Cart
     */
    subtotal: number | null;
    /**
     * The total shipping price for the items in the shopping cart, including any handling charges.
     * @type {number}
     * @memberof Cart
     */
    shippingPrice: number | null;
    /**
     * The taxes associated with the transaction.
     * @type {object}
     * @memberof Cart
     */
    taxes: object | null;
    /**
     * The costs associated with the transaction, such as manufacturing costs, shipping expenses not borne by the customer, or any other costs.
     * @type {object}
     * @memberof Cart
     */
    costs: object | null;
    /**
     * The amount of the discount applied to the shopping cart.
     * @type {number}
     * @memberof Cart
     */
    discount: number | null;
    /**
     * The total revenue or grand total associated with the transaction. It includes shipping, tax, and any other adjustment.
     * @type {number}
     * @memberof Cart
     */
    total: number;
    /**
     * The coupon applied to the shopping cart. For example, \"SUPER_DEALS\".
     * @type {string}
     * @memberof Cart
     */
    coupon: string | null;
    /**
     * The timestamp when the shopping cart was last updated, in milliseconds since epoch.
     * @type {number}
     * @memberof Cart
     */
    lastUpdateTime: number;
}
/**
 * An item in a shopping cart.
 * @export
 * @interface CartItem
 */
export interface CartItem {
    /**
     * The index, starting from zero, representing the order in which the item was added to the shopping cart.
     * @type {number}
     * @memberof CartItem
     */
    index: number;
    /**
     * 
     * @type {ProductDetails}
     * @memberof CartItem
     */
    product: ProductDetails;
    /**
     * The number of units of the item in the shopping cart.
     * @type {number}
     * @memberof CartItem
     */
    quantity: number;
    /**
     * The total for the item. It includes discounts and any other adjustment.
     * @type {number}
     * @memberof CartItem
     */
    total: number;
    /**
     * The amount of the discount applied to the item.
     * @type {number}
     * @memberof CartItem
     */
    discount: number | null;
    /**
     * The coupon applied to the item. For example, \"SUPER_DEALS\".
     * @type {string}
     * @memberof CartItem
     */
    coupon: string | null;
}
/**
 * An event recording that a shopping cart was modified.
 * @export
 * @interface CartModified
 */
export interface CartModified extends EventPayload {
    /**
     * 
     * @type {Cart}
     * @memberof CartModified
     */
    cart: Cart;
}
/**
 * An event recording that a shopping cart was viewed.
 * @export
 * @interface CartViewed
 */
export interface CartViewed extends EventPayload {
    /**
     * 
     * @type {Cart}
     * @memberof CartViewed
     */
    cart: Cart;
}
/**
 * An event recording that a shopping cart started the checkout process.
 * @export
 * @interface CheckoutStarted
 */
export interface CheckoutStarted extends EventPayload {
    /**
     * 
     * @type {Cart}
     * @memberof CheckoutStarted
     */
    cart: Cart;
    /**
     * The ID that uniquely identifies the order across the store.
     * @type {string}
     * @memberof CheckoutStarted
     */
    orderId: string | null;
}
/**
 * An event recording that the user\'s client was detected.
 * @export
 * @interface ClientDetected
 */
export interface ClientDetected extends EventPayload {
    /**
     * 
     * @type {WebClient}
     * @memberof ClientDetected
     */
    client: WebClient;
}
/**
 * The available information about a device.
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * The name of the device, non-empty. For example, \"Mac\", \"iPhone\" or \"Nexus 10\".
     * @type {string}
     * @memberof Device
     */
    name: string | null;
    /**
     * The vendor of the device, non-empty. For example, \"Apple\", \"Samsung\" or \"LG\".
     * @type {string}
     * @memberof Device
     */
    vendor: string | null;
    /**
     * 
     * @type {DeviceCategory}
     * @memberof Device
     */
    category: DeviceCategory;
    /**
     * 
     * @type {OperatingSystem}
     * @memberof Device
     */
    operatingSystem: OperatingSystem;
}
/**
 * The category of the device.
 * @export
 * @enum {string}
 */
export enum DeviceCategory {
    DESKTOP = 'DESKTOP',
    TABLET = 'TABLET',
    MOBILE = 'MOBILE',
    BOT = 'BOT',
    OTHER = 'OTHER',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * The ID of the session assigned to the event.
     * @type {string}
     * @memberof Event
     */
    sessionId: string;
    /**
     * The internal ID of the user who originated the event.
     * @type {string}
     * @memberof Event
     */
    userId: string;
    /**
     * The timestamp when the event was tracked, in milliseconds since epoch.
     * @type {number}
     * @memberof Event
     */
    timestamp: number;
    /**
     * 
     * @type {EventContext}
     * @memberof Event
     */
    context: EventContext | null;
    /**
     * 
     * @type {EventPayload}
     * @memberof Event
     */
    payload: EventPayload;
}
/**
 * The context of the client when the event was tracked.
 * @export
 * @interface EventContext
 */
export interface EventContext {
    /**
     * 
     * @type {string}
     * @memberof EventContext
     */
    type: string;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof EventContext
     */
    metadata?: { [key: string]: string | undefined; };
}
/**
 * An event recording a domain-specific occurrence.
 * @export
 * @interface EventOccurred
 */
export interface EventOccurred extends EventPayload {
    /**
     * The name of the event. For example, \"pollAnswered\" or \"onboardingStarted\".
     * @type {string}
     * @memberof EventOccurred
     */
    name: string;
    /**
     * The ID of the personalization associated with the event.
     * @type {string}
     * @memberof EventOccurred
     */
    personalizationId: string | null;
    /**
     * The name of the audience associated with the event.
     * @type {string}
     * @memberof EventOccurred
     */
    audience: string | null;
    /**
     * The ID of the test associated with the event.
     * @type {string}
     * @memberof EventOccurred
     */
    testId: string | null;
    /**
     * The ID of the test group associated with the event, also known as \"variant\".
     * @type {string}
     * @memberof EventOccurred
     */
    groupId: string | null;
    /**
     * The details about the event.
     * @type {object}
     * @memberof EventOccurred
     */
    details: object;
}
/**
 * The event details, specific to the type of event.
 * @export
 * @interface EventPayload
 */
export interface EventPayload {
    /**
     * 
     * @type {string}
     * @memberof EventPayload
     */
    type: string;
}
/**
 * 
 * @export
 * @interface EventResponse
 */
export interface EventResponse {
    /**
     * 
     * @type {Array<Event>}
     * @memberof EventResponse
     */
    items: Array<Event>;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    nextCursor: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum EventType {
    USER_SIGNED_UP = 'userSignedUp',
    USER_SIGNED_IN = 'userSignedIn',
    USER_SIGNED_OUT = 'userSignedOut',
    TAB_OPENED = 'tabOpened',
    TAB_URL_CHANGED = 'tabUrlChanged',
    TAB_VISIBILITY_CHANGED = 'tabVisibilityChanged',
    LOCATION_DETECTED = 'locationDetected',
    CLIENT_DETECTED = 'clientDetected',
    PAGE_OPENED = 'pageOpened',
    PAGE_LOADED = 'pageLoaded',
    PRODUCT_VIEWED = 'productViewed',
    CART_VIEWED = 'cartViewed',
    CART_MODIFIED = 'cartModified',
    CHECKOUT_STARTED = 'checkoutStarted',
    ORDER_PLACED = 'orderPlaced',
    TEST_GROUP_ASSIGNED = 'testGroupAssigned',
    NOTHING_CHANGED = 'nothingChanged',
    GOAL_COMPLETED = 'goalCompleted',
    EVENT_OCCURRED = 'eventOccurred'
}

/**
 * A geographic location represented by a latitude and longitude coordinates pair.
 * @export
 * @interface GeoPoint
 */
export interface GeoPoint {
    /**
     * The latitude of the geo-point, may be either negative or positive.
     * @type {number}
     * @memberof GeoPoint
     */
    latitude: number;
    /**
     * The longitude of the geo-point, may be either negative or positive.
     * @type {number}
     * @memberof GeoPoint
     */
    longitude: number;
}
/**
 * An event recording a completed activity, such as a purchase.
 * @export
 * @interface GoalCompleted
 */
export interface GoalCompleted extends EventPayload {
    /**
     * The ID of the goal.
     * @type {string}
     * @memberof GoalCompleted
     */
    goalId: string;
    /**
     * The monetary value associated to the completion of the goal. This can represent an estimated value or a symbolic value. For example, if the sales team can close 10% of people who sign up for a newsletter, and the average transaction is $500, then a possible value for newsletter sign-ups can be $50 (i.e., 10% of $500).
     * @type {string}
     * @memberof GoalCompleted
     */
    value: string | null;
    /**
     * The currency in which the monetary value is expressed. The currency should be specified using the 3-letter currency codes defined by the ISO 4217 standard. For currencies having no official recognition in ISO 4217, as is the case with cryptocurrencies, it is allowed the use of non-ISO codes adopted locally or commercially. For example, \"BRL\" for Brazilian real or \"BTC\" for Bitcoin.
     * @type {string}
     * @memberof GoalCompleted
     */
    currency: string | null;
}
/**
 * An identification or estimation of a geographic location of an object.
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {LocationContinent}
     * @memberof Location
     */
    continent: LocationContinent | null;
    /**
     * The highest administrative division, also known as a nation. The value is a two-letter country code, as defined in ISO 3166. For example, US for United States, BR for Brazil and DE for Germany.
     * @type {string}
     * @memberof Location
     */
    country: string | null;
    /**
     * 
     * @type {Region}
     * @memberof Location
     */
    region: Region;
    /**
     * The name of the incorporated city or town political entity. For example, \"Sao Paulo\".
     * @type {string}
     * @memberof Location
     */
    city: string | null;
    /**
     * An administrative division smaller than a city and larger than a neighborhood. For example, the district of Manhattan in New York.
     * @type {string}
     * @memberof Location
     */
    district: string | null;
    /**
     * The time-zone ID as defined in IANA Time Zone Database. For example, \"America/New_York\".
     * @type {string}
     * @memberof Location
     */
    timezone: string | null;
    /**
     * 
     * @type {GeoPoint}
     * @memberof Location
     */
    coordinates: GeoPoint | null;
    /**
     * 
     * @type {LocationSource}
     * @memberof Location
     */
    source: LocationSource | null;
}
/**
 * The continent of the location.
 * @export
 * @enum {string}
 */
export enum LocationContinent {
    AF = 'AF',
    AN = 'AN',
    AS = 'AS',
    EU = 'EU',
    NA = 'NA',
    OC = 'OC',
    SA = 'SA'
}

/**
 * An event recording that the location of a user was detected.
 * @export
 * @interface LocationDetected
 */
export interface LocationDetected extends EventPayload {
    /**
     * 
     * @type {Location}
     * @memberof LocationDetected
     */
    location: Location;
}
/**
 * The source of information used to determine the location.
 * @export
 * @enum {string}
 */
export enum LocationSource {
    UNKNOWN = 'UNKNOWN',
    IP = 'IP',
    INPUT = 'INPUT',
    BROWSER = 'BROWSER',
    GPS = 'GPS'
}

/**
 * An event recording a period of inactivity.
 * @export
 * @interface NothingChanged
 */
export interface NothingChanged extends EventPayload {
    /**
     * The timestamp when an activity was last observed, in milliseconds since epoch.
     * @type {number}
     * @memberof NothingChanged
     */
    sinceTime: number;
}
/**
 * The available information about an operating system.
 * @export
 * @interface OperatingSystem
 */
export interface OperatingSystem {
    /**
     * The name of the operating system, non-empty. For example, \"macOS\", \"iOS\" or \"Android\".
     * @type {string}
     * @memberof OperatingSystem
     */
    name: string | null;
    /**
     * The version of operating system, non-empty. For example, \"10.15.1\", \"NT 5.1\" or \"8.4\".
     * @type {string}
     * @memberof OperatingSystem
     */
    version: string | null;
}
/**
 * An order placed in an online store.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * The ID that uniquely identifies the order across the store.
     * @type {string}
     * @memberof Order
     */
    orderId: string;
    /**
     * The currency in which the monetary values are expressed in the order. The currency should be specified using the 3-letter currency codes defined by the ISO 4217 standard. For currencies having no official recognition in ISO 4217, as is the case with cryptocurrencies, it is allowed the use of non-ISO codes adopted locally or commercially. For example, \"BRL\" for Brazilian real or \"BTC\" for Bitcoin.
     * @type {string}
     * @memberof Order
     */
    currency: string;
    /**
     * The list of items in the order.
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    items: Array<OrderItem>;
    /**
     * The total of all items and quantities in the order including applied item promotions. Applied order discounts, estimated shipping, and applied shipping discounts should be excluded from the subtotal amount.
     * @type {number}
     * @memberof Order
     */
    subtotal: number | null;
    /**
     * The total shipping price for the order, including any handling charges.
     * @type {number}
     * @memberof Order
     */
    shippingPrice: number | null;
    /**
     * The taxes associated with the transaction.
     * @type {object}
     * @memberof Order
     */
    taxes: object | null;
    /**
     * The costs associated with the transaction, such as manufacturing costs, shipping expenses not borne by the customer, or any other costs.
     * @type {object}
     * @memberof Order
     */
    costs: object | null;
    /**
     * The amount of the discount applied to the order.
     * @type {number}
     * @memberof Order
     */
    discount: number | null;
    /**
     * The total revenue or grand total associated with the transaction. It includes shipping, tax, and any other adjustment.
     * @type {number}
     * @memberof Order
     */
    total: number;
    /**
     * The coupon applied to the order. For example, \"SUPER_DEALS\".
     * @type {string}
     * @memberof Order
     */
    coupon: string | null;
    /**
     * The payment method used in the payment. For example, \"Credit Card\", \"Paypal\" or \"Wallet\".
     * @type {string}
     * @memberof Order
     */
    paymentMethod: string | null;
    /**
     * The number of installments of the transaction, non-negative.
     * @type {number}
     * @memberof Order
     */
    installments: number | null;
    /**
     * 
     * @type {OrderStatus}
     * @memberof Order
     */
    status: OrderStatus | null;
}
/**
 * An item of an order.
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * The index, starting from zero, representing the order in which the item was added to the shopping cart.
     * @type {number}
     * @memberof OrderItem
     */
    index: number;
    /**
     * 
     * @type {ProductDetails}
     * @memberof OrderItem
     */
    product: ProductDetails;
    /**
     * The number of units of the item ordered.
     * @type {number}
     * @memberof OrderItem
     */
    quantity: number;
    /**
     * The total for the item. It includes discounts and any other adjustment.
     * @type {number}
     * @memberof OrderItem
     */
    total: number;
    /**
     * The amount of the discount applied to the item.
     * @type {number}
     * @memberof OrderItem
     */
    discount: number | null;
    /**
     * The coupon applied to the item. For example, \"SUPER_DEALS\".
     * @type {string}
     * @memberof OrderItem
     */
    coupon: string | null;
}
/**
 * An event recording that an order was placed.
 * @export
 * @interface OrderPlaced
 */
export interface OrderPlaced extends EventPayload {
    /**
     * 
     * @type {Order}
     * @memberof OrderPlaced
     */
    order: Order;
}
/**
 * The current status of the order.
 * @export
 * @enum {string}
 */
export enum OrderStatus {
    PLACED = 'PLACED',
    PAID = 'PAID',
    COMPLETED = 'COMPLETED'
}

/**
 * An event recording that a page was loaded.
 * @export
 * @interface PageLoaded
 */
export interface PageLoaded extends EventPayload {
    /**
     * The URL of the page.
     * @type {string}
     * @memberof PageLoaded
     */
    url: string;
    /**
     * The title of the page.
     * @type {string}
     * @memberof PageLoaded
     */
    title: string;
    /**
     * The last time the page was modified.
     * @type {number}
     * @memberof PageLoaded
     */
    lastModifiedTime: number;
}
/**
 * An event recording that a page was opened.
 * @export
 * @interface PageOpened
 */
export interface PageOpened extends EventPayload {
    /**
     * The URL of the page.
     * @type {string}
     * @memberof PageOpened
     */
    url: string;
    /**
     * The user-agent of the client.
     * @type {string}
     * @memberof PageOpened
     */
    userAgent: string | null;
    /**
     * An ordered list of the user\'s preferred languages.
     * @type {string}
     * @memberof PageOpened
     */
    preferredLanguages: string | null;
    /**
     * The URI of the page that linked to the page that was opened. The value is null when the user navigated to the page directly (not through a link, but by using a bookmark, for example).
     * @type {string}
     * @memberof PageOpened
     */
    referrer: string | null;
}
/**
 * The detailed information of a product.
 * @export
 * @interface ProductDetails
 */
export interface ProductDetails {
    /**
     * The ID that uniquely identifies the product across the store, non-empty. For example, \"3108\" or \"yO7q4r\".
     * @type {string}
     * @memberof ProductDetails
     */
    productId: string;
    /**
     * The code that uniquely identifies the product variant across the store, non-empty. For example, \"IPH-GRE-64\".
     * @type {string}
     * @memberof ProductDetails
     */
    sku: string | null;
    /**
     * The name of the product, non-empty. For example \"iPhone\".
     * @type {string}
     * @memberof ProductDetails
     */
    name: string;
    /**
     * The category of the product, non-empty. For example, \"Phone\".
     * @type {string}
     * @memberof ProductDetails
     */
    category: string | null;
    /**
     * The brand associated with the product. For example, \"Apple\".
     * @type {string}
     * @memberof ProductDetails
     */
    brand: string | null;
    /**
     * The variant of the product, such as size, color and style. For example, \"64GB Green\".
     * @type {string}
     * @memberof ProductDetails
     */
    variant: string | null;
    /**
     * The price of the product displayed in the store. For example, 59.90.
     * @type {number}
     * @memberof ProductDetails
     */
    displayPrice: number;
    /**
     * The original price of the product. For example, 99.90.
     * @type {number}
     * @memberof ProductDetails
     */
    originalPrice: number | null;
    /**
     * The URL of the product page. For example, \"https://apple.com/iphone\".
     * @type {string}
     * @memberof ProductDetails
     */
    url: string | null;
    /**
     * The URL of the main product image. For example, \"https://img.apple.com/iphone.png\".
     * @type {string}
     * @memberof ProductDetails
     */
    imageUrl: string | null;
}
/**
 * An event recording that a shopping cart was modified.
 * @export
 * @interface ProductViewed
 */
export interface ProductViewed extends EventPayload {
    /**
     * 
     * @type {ProductDetails}
     * @memberof ProductViewed
     */
    product: ProductDetails;
}
/**
 * A subsection of a country, typically a state or province.
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * The subdivision name, non-empty. For example, \"Sao Paulo\".
     * @type {string}
     * @memberof Region
     */
    name: string | null;
    /**
     * The 2-letter code as defined by the ISO 3166-2 standard. For example, \"SP\".
     * @type {string}
     * @memberof Region
     */
    code: string | null;
}
/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * The ID that uniquely identifies the session across the application.
     * @type {string}
     * @memberof Session
     */
    sessionId?: string;
    /**
     * The ID that uniquely identifies the user across the cluster.
     * @type {string}
     * @memberof Session
     */
    userId?: string;
    /**
     * The ID of the session that superseded this session. Usually, a session receives a parent ID when a user is identified, causing the current anonymous session to end and a new identified session to begin. In this case, the ID of the new session is assigned as the parent ID of the anonymous session.
     * @type {string}
     * @memberof Session
     */
    parentId?: string | null;
    /**
     * The flag that indicates whether the user is anonymous.
     * @type {boolean}
     * @memberof Session
     */
    isAnonymous?: boolean;
    /**
     * 
     * @type {SessionWindow}
     * @memberof Session
     */
    window?: SessionWindow;
    /**
     * The time from which the session is closed for new events, but still may accept late-arriving events. The close time may be extended if new events arrive before the session is closed.
     * @type {number}
     * @memberof Session
     */
    closeTime?: number;
    /**
     * The URI of the content that linked to the page that started the session.
     * @type {string}
     * @memberof Session
     */
    referrer?: string | null;
    /**
     * The page that started the session.
     * @type {string}
     * @memberof Session
     */
    landingPageUrl?: string | null;
    /**
     * 
     * @type {Campaign}
     * @memberof Session
     */
    campaign?: Campaign;
    /**
     * 
     * @type {Location}
     * @memberof Session
     */
    location?: Location;
    /**
     * 
     * @type {WebClient}
     * @memberof Session
     */
    client?: WebClient;
    /**
     * The custom attributes.
     * @type {{ [key: string]: any | undefined; }}
     * @memberof Session
     */
    attributes?: { [key: string]: any | undefined; };
    /**
     * 
     * @type {SessionStatistics}
     * @memberof Session
     */
    statistics?: SessionStatistics;
}
/**
 * 
 * @export
 * @interface SessionResponse
 */
export interface SessionResponse {
    /**
     * 
     * @type {Array<Session>}
     * @memberof SessionResponse
     */
    items: Array<Session>;
    /**
     * 
     * @type {string}
     * @memberof SessionResponse
     */
    nextCursor: string;
}
/**
 * The aggregated statistics of the session.
 * @export
 * @interface SessionStatistics
 */
export interface SessionStatistics {
    /**
     * The total number of page views.
     * @type {number}
     * @memberof SessionStatistics
     */
    pageViews?: number;
    /**
     * The total number of tab views.
     * @type {number}
     * @memberof SessionStatistics
     */
    tabViews?: number;
    /**
     * The total number of orders placed.
     * @type {number}
     * @memberof SessionStatistics
     */
    orders?: number;
}
/**
 * The time window covering the first and last event of the session.
 * @export
 * @interface SessionWindow
 */
export interface SessionWindow {
    /**
     * 
     * @type {number}
     * @memberof SessionWindow
     */
    start?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionWindow
     */
    end?: number;
}
/**
 * An event recording that a new tab was opened.
 * @export
 * @interface TabOpened
 */
export interface TabOpened extends EventPayload {
    /**
     * The ID that uniquely identifies the tab across the session.
     * @type {string}
     * @memberof TabOpened
     */
    tabId: string;
}
/**
 * An event recording that the URL of a tab has changed.
 * @export
 * @interface TabUrlChanged
 */
export interface TabUrlChanged extends EventPayload {
    /**
     * The ID that uniquely identifies the tab across the session.
     * @type {string}
     * @memberof TabUrlChanged
     */
    tabId: string;
    /**
     * The URL the page that the tab was on.
     * @type {string}
     * @memberof TabUrlChanged
     */
    url: string;
}
/**
 * The visibility of the tab.
 * @export
 * @enum {string}
 */
export enum TabVisibility {
    VISIBLE = 'VISIBLE',
    HIDDLE = 'HIDDEN'
}

/**
 * An event recording that the visibility of a tab has changed.
 * @export
 * @interface TabVisibilityChanged
 */
export interface TabVisibilityChanged extends EventPayload {
    /**
     * The ID that uniquely identifies the tab across the session.
     * @type {string}
     * @memberof TabVisibilityChanged
     */
    tabId: string;
    /**
     * 
     * @type {TabVisibility}
     * @memberof TabVisibilityChanged
     */
    visibility: TabVisibility;
}
/**
 * An event recording that a test group was assigned to a user.
 * @export
 * @interface TestGroupAssigned
 */
export interface TestGroupAssigned extends EventPayload {
    /**
     * The ID of the test. For example, \"black-friday-banner\" or \"home-banner-cta\".
     * @type {string}
     * @memberof TestGroupAssigned
     */
    testId: string;
    /**
     * The ID of the test group, also known as \"variant\". For example, \"black-friday-promo\" or \"black-friday-shipping\".
     * @type {string}
     * @memberof TestGroupAssigned
     */
    groupId: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * The internal ID assigned to the user, unique across the cluster.
     * @type {string}
     * @memberof User
     */
    userId?: string;
    /**
     * The external user ID that is used to identify the user on the application side, unique across the cluster. It is always null for anonymous users.
     * @type {string}
     * @memberof User
     */
    externalUserId?: string | null;
    /**
     * The first name attribute.
     * @type {string}
     * @memberof User
     */
    firstName?: string | null;
    /**
     * The last name attribute.
     * @type {string}
     * @memberof User
     */
    lastName?: string | null;
    /**
     * The birth date attribute.
     * @type {number}
     * @memberof User
     */
    birthDate?: number | null;
    /**
     * The gender attribute.
     * @type {string}
     * @memberof User
     */
    gender?: string | null;
    /**
     * The email attribute.
     * @type {string}
     * @memberof User
     */
    email?: string | null;
    /**
     * The alternate email attribute.
     * @type {string}
     * @memberof User
     */
    alternateEmail?: string | null;
    /**
     * The phone attribute.
     * @type {string}
     * @memberof User
     */
    phone?: string | null;
    /**
     * The alternate phone attribute.
     * @type {string}
     * @memberof User
     */
    alternatePhone?: string | null;
    /**
     * 
     * @type {UserAddress}
     * @memberof User
     */
    address?: UserAddress;
    /**
     * The avatar attribute.
     * @type {string}
     * @memberof User
     */
    avatar?: string | null;
    /**
     * The company attribute.
     * @type {string}
     * @memberof User
     */
    company?: string | null;
    /**
     * The company URL attribute.
     * @type {string}
     * @memberof User
     */
    companyUrl?: string | null;
    /**
     * The job title attribute.
     * @type {string}
     * @memberof User
     */
    jobTitle?: string | null;
    /**
     * The activities attribute.
     * @type {string}
     * @memberof User
     */
    activities?: string | null;
    /**
     * The interests attribute.
     * @type {string}
     * @memberof User
     */
    interests?: string | null;
    /**
     * The custom attributes.
     * @type {{ [key: string]: any | undefined; }}
     * @memberof User
     */
    customAttributes?: { [key: string]: any | undefined; };
    /**
     * The timestamp when the user was last modified, in milliseconds since epoch. It is not updated on sync.
     * @type {number}
     * @memberof User
     */
    lastModifiedTime?: number;
    /**
     * 
     * @type {UserStatistics}
     * @memberof User
     */
    statistics?: UserStatistics;
}
/**
 * The address attribute.
 * @export
 * @interface UserAddress
 */
export interface UserAddress {
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    street?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    district?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    city?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    region?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    country?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    postalCode?: string | null;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {Array<User>}
     * @memberof UserResponse
     */
    items: Array<User>;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    nextCursor: string;
}
/**
 * An event recording that a user has signed in.
 * @export
 * @interface UserSignedIn
 */
export interface UserSignedIn extends EventPayload {
    /**
     * The external ID of the user.
     * @type {string}
     * @memberof UserSignedIn
     */
    externalUserId: string;
}
/**
 * An event recording that a user has signed out.
 * @export
 * @interface UserSignedOut
 */
export interface UserSignedOut extends EventPayload {
    /**
     * The external ID of the user.
     * @type {string}
     * @memberof UserSignedOut
     */
    externalUserId: string;
}
/**
 * An event recording that a user has signed up.
 * @export
 * @interface UserSignedUp
 */
export interface UserSignedUp extends EventPayload {
    /**
     * The external ID of the user.
     * @type {string}
     * @memberof UserSignedUp
     */
    externalUserId: string;
}
/**
 * The aggregated statistics of the user.
 * @export
 * @interface UserStatistics
 */
export interface UserStatistics {
    /**
     * The total number of orders placed across all applications in a cluster.
     * @type {number}
     * @memberof UserStatistics
     */
    orders?: number;
    /**
     * The total number of sessions across all applications in a cluster.
     * @type {number}
     * @memberof UserStatistics
     */
    sessions?: number;
}
/**
 * The available information about a web client.
 * @export
 * @interface WebClient
 */
export interface WebClient {
    /**
     * 
     * @type {Browser}
     * @memberof WebClient
     */
    browser: Browser;
    /**
     * 
     * @type {Device}
     * @memberof WebClient
     */
    device: Device;
}
/**
 * The context of the web client at the time the event was tracked.
 * @export
 * @interface WebContext
 */
export interface WebContext extends EventContext {
    /**
     * The ID that uniquely identifies the tab across the session.
     * @type {string}
     * @memberof WebContext
     */
    tabId: string;
    /**
     * The URL of the page that the client was on.
     * @type {string}
     * @memberof WebContext
     */
    url: string;
}

/**
 * ExportApi - axios parameter creator
 * @export
 */
export const ExportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [start] 
         * @param {number} [end] 
         * @param {number} [pageSize] 
         * @param {string} [cursor] 
         * @param {Array<EventType>} [events] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportEvents: async (start?: number, end?: number, pageSize?: number, cursor?: string, events?: Array<EventType>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (events) {
                localVarQueryParameter['events'] = events;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [start] 
         * @param {number} [end] 
         * @param {number} [pageSize] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSessions: async (start?: number, end?: number, pageSize?: number, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [start] 
         * @param {number} [end] 
         * @param {number} [pageSize] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportUsers: async (start?: number, end?: number, pageSize?: number, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExportApi - functional programming interface
 * @export
 */
export const ExportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [start] 
         * @param {number} [end] 
         * @param {number} [pageSize] 
         * @param {string} [cursor] 
         * @param {Array<EventType>} [events] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportEvents(start?: number, end?: number, pageSize?: number, cursor?: string, events?: Array<EventType>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportEvents(start, end, pageSize, cursor, events, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [start] 
         * @param {number} [end] 
         * @param {number} [pageSize] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSessions(start?: number, end?: number, pageSize?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportSessions(start, end, pageSize, cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [start] 
         * @param {number} [end] 
         * @param {number} [pageSize] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportUsers(start?: number, end?: number, pageSize?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportUsers(start, end, pageSize, cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExportApi - factory interface
 * @export
 */
export const ExportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExportApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [start] 
         * @param {number} [end] 
         * @param {number} [pageSize] 
         * @param {string} [cursor] 
         * @param {Array<EventType>} [events] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportEvents(start?: number, end?: number, pageSize?: number, cursor?: string, events?: Array<EventType>, options?: any): AxiosPromise<EventResponse> {
            return localVarFp.exportEvents(start, end, pageSize, cursor, events, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [start] 
         * @param {number} [end] 
         * @param {number} [pageSize] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSessions(start?: number, end?: number, pageSize?: number, cursor?: string, options?: any): AxiosPromise<SessionResponse> {
            return localVarFp.exportSessions(start, end, pageSize, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [start] 
         * @param {number} [end] 
         * @param {number} [pageSize] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportUsers(start?: number, end?: number, pageSize?: number, cursor?: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.exportUsers(start, end, pageSize, cursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for exportEvents operation in ExportApi.
 * @export
 * @interface ExportApiExportEventsRequest
 */
export interface ExportApiExportEventsRequest {
    /**
     * 
     * @type {number}
     * @memberof ExportApiExportEvents
     */
    readonly start?: number

    /**
     * 
     * @type {number}
     * @memberof ExportApiExportEvents
     */
    readonly end?: number

    /**
     * 
     * @type {number}
     * @memberof ExportApiExportEvents
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof ExportApiExportEvents
     */
    readonly cursor?: string

    /**
     * 
     * @type {Array<EventType>}
     * @memberof ExportApiExportEvents
     */
    readonly events?: Array<EventType>
}

/**
 * Request parameters for exportSessions operation in ExportApi.
 * @export
 * @interface ExportApiExportSessionsRequest
 */
export interface ExportApiExportSessionsRequest {
    /**
     * 
     * @type {number}
     * @memberof ExportApiExportSessions
     */
    readonly start?: number

    /**
     * 
     * @type {number}
     * @memberof ExportApiExportSessions
     */
    readonly end?: number

    /**
     * 
     * @type {number}
     * @memberof ExportApiExportSessions
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof ExportApiExportSessions
     */
    readonly cursor?: string
}

/**
 * Request parameters for exportUsers operation in ExportApi.
 * @export
 * @interface ExportApiExportUsersRequest
 */
export interface ExportApiExportUsersRequest {
    /**
     * 
     * @type {number}
     * @memberof ExportApiExportUsers
     */
    readonly start?: number

    /**
     * 
     * @type {number}
     * @memberof ExportApiExportUsers
     */
    readonly end?: number

    /**
     * 
     * @type {number}
     * @memberof ExportApiExportUsers
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof ExportApiExportUsers
     */
    readonly cursor?: string
}

/**
 * ExportApi - object-oriented interface
 * @export
 * @class ExportApi
 * @extends {BaseAPI}
 */
export class ExportApi extends BaseAPI {
    /**
     * 
     * @param {ExportApiExportEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportApi
     */
    public exportEvents(requestParameters: ExportApiExportEventsRequest = {}, options?: any) {
        return ExportApiFp(this.configuration).exportEvents(requestParameters.start, requestParameters.end, requestParameters.pageSize, requestParameters.cursor, requestParameters.events, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExportApiExportSessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportApi
     */
    public exportSessions(requestParameters: ExportApiExportSessionsRequest = {}, options?: any) {
        return ExportApiFp(this.configuration).exportSessions(requestParameters.start, requestParameters.end, requestParameters.pageSize, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExportApiExportUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportApi
     */
    public exportUsers(requestParameters: ExportApiExportUsersRequest = {}, options?: any) {
        return ExportApiFp(this.configuration).exportUsers(requestParameters.start, requestParameters.end, requestParameters.pageSize, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
}


